{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Qhh60e4xfpfZjFLuXt-b7BVuLF98tl0t","authorship_tag":"ABX9TyOVSyCH3wcmbdY0PcXYH+hV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"3d1b20d565a149218c374edb5fbc63be":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_dd27b5e77abd42178692a598082e17cc","IPY_MODEL_25f341aed3c845798f9429988212aa37","IPY_MODEL_d913806f28044d028466778768852fcc"],"layout":"IPY_MODEL_5e6ef6726be34aa994520e0636092825"}},"dd27b5e77abd42178692a598082e17cc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cfd595f5ed144f7f839ce97667f8e7b1","placeholder":"​","style":"IPY_MODEL_8256a1cadafd4e64ab3704d1bf73a719","value":""}},"25f341aed3c845798f9429988212aa37":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2687d96473dd410c91eeb7e9bdf51c86","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8af1ed2fc7234177a27590f3fb5054a9","value":100}},"d913806f28044d028466778768852fcc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_76ec22949a84472dbae32f3911c15f85","placeholder":"​","style":"IPY_MODEL_e7a9082cf13841d2960ff236561b8a77","value":" 300/? [00:46&lt;00:00,  8.15it/s]"}},"5e6ef6726be34aa994520e0636092825":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfd595f5ed144f7f839ce97667f8e7b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8256a1cadafd4e64ab3704d1bf73a719":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2687d96473dd410c91eeb7e9bdf51c86":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8af1ed2fc7234177a27590f3fb5054a9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"76ec22949a84472dbae32f3911c15f85":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e7a9082cf13841d2960ff236561b8a77":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["3d1b20d565a149218c374edb5fbc63be","dd27b5e77abd42178692a598082e17cc","25f341aed3c845798f9429988212aa37","d913806f28044d028466778768852fcc","5e6ef6726be34aa994520e0636092825","cfd595f5ed144f7f839ce97667f8e7b1","8256a1cadafd4e64ab3704d1bf73a719","2687d96473dd410c91eeb7e9bdf51c86","8af1ed2fc7234177a27590f3fb5054a9","76ec22949a84472dbae32f3911c15f85","e7a9082cf13841d2960ff236561b8a77"]},"id":"n1PWXKkCn3pK","executionInfo":{"status":"ok","timestamp":1751934622695,"user_tz":360,"elapsed":46728,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"50489b65-4fea-4edb-e2f6-cdac5a1dd436"},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3d1b20d565a149218c374edb5fbc63be"}},"metadata":{}}],"source":["# Instalar librerías necesarias (Solo ejecutar si no están instaladas)\n","from IPython.utils import io\n","import tqdm.notebook\n","\n","total = 100\n","with tqdm.notebook.tqdm(total=total) as pbar:\n","    with io.capture_output() as captured:\n","        # Instalar rdkit\n","        !pip -q install rdkit.pypi==2021.9.4\n","        pbar.update(20)\n","        # Instalar Pillow\n","        !pip -q install Pillow\n","        pbar.update(40)\n","        # Instalar molplotly\n","        !pip install molplotly\n","        pbar.update(60)\n","        # Instalar jupyter-dash\n","        !pip install jupyter-dash\n","        pbar.update(80)\n","        # Instalar el diseño de aplicación dash\n","        !pip install dash-bootstrap-components\n","        pbar.update(100)\n"]},{"cell_type":"code","source":["# Importar librerías\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","from sklearn.decomposition import PCA\n","import seaborn as sns"],"metadata":{"id":"HpBFgR5YoIoB","executionInfo":{"status":"ok","timestamp":1751934873858,"user_tz":360,"elapsed":5,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Leer bases de datos\n","datos = \"/content/drive/MyDrive/INGER/ETAPA 2024/Version Final/0. Data Set/Concatenadas.csv\"\n","datos = pd.read_csv(datos)"],"metadata":{"id":"4ZV-DWSGoIk7","executionInfo":{"status":"ok","timestamp":1751934876925,"user_tz":360,"elapsed":1518,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["datos"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":583},"id":"wRlupu-BoIiQ","executionInfo":{"status":"ok","timestamp":1751934877601,"user_tz":360,"elapsed":50,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"ff6144f0-e1f5-402b-e8b6-62ad02115a79"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              Name  Total Molweight  \\\n","0    (R,R)-Cis-Diethyl Tetrahydro-2,8-Chrysenediol          320.431   \n","1            1,2,3,4,6-Penta-O-Galloyl-B-D-Glucose          940.679   \n","2                       10-Hydroxy-2-Decenoic Acid          186.250   \n","3                                            1400W          177.250   \n","4                                   17-A-Estradiol          272.387   \n","..                                             ...              ...   \n","400                                      Tolcapone          273.243   \n","401                                Acridine Orange          265.359   \n","402                                     Aflatoxins          312.276   \n","403                             Diethylstilbestrol          268.355   \n","404                                 Kynurenic Acid          189.170   \n","\n","     Monoisotopic Mass   cLogP  cLogS  H-Acceptors  H-Donors  \\\n","0           320.177630  4.8318 -4.116            2         2   \n","1           940.118190  1.8357 -3.209           26        15   \n","2           186.125595  2.1572 -1.884            3         2   \n","3           177.126597 -0.1475 -1.874            3         2   \n","4           272.177630  3.8766 -4.020            2         2   \n","..                 ...     ...    ...          ...       ...   \n","400         273.063724  1.5205 -3.928            6         2   \n","401         265.157897  3.0853 -3.895            3         0   \n","402         312.063390  1.6346 -3.266            6         0   \n","403         268.146330  4.5248 -3.158            2         2   \n","404         189.042594  0.2516 -2.431            4         2   \n","\n","     Total Surface Area  Relative PSA  Polar Surface Area  ...  Amides  \\\n","0                246.20      0.106420               40.46  ...       0   \n","1                619.06      0.519660              444.18  ...       0   \n","2                166.77      0.235290               57.53  ...       0   \n","3                153.05      0.274750               64.40  ...       0   \n","4                200.69      0.130550               40.46  ...       0   \n","..                  ...           ...                 ...  ...     ...   \n","400              199.40      0.349350              103.35  ...       0   \n","401              210.86      0.085697               19.37  ...       0   \n","402              208.96      0.316230               71.06  ...       0   \n","403              220.68      0.118720               40.46  ...       0   \n","404              137.78      0.367540               66.40  ...       0   \n","\n","     Amines  Alkyl-Amines  Aromatic Amines  Aromatic Nitrogens  \\\n","0         0             0                0                   0   \n","1         0             0                0                   0   \n","2         0             0                0                   0   \n","3         1             1                0                   0   \n","4         0             0                0                   0   \n","..      ...           ...              ...                 ...   \n","400       0             0                0                   0   \n","401       2             0                2                   1   \n","402       0             0                0                   0   \n","403       0             0                0                   0   \n","404       0             0                0                   0   \n","\n","     Basic Nitrogens  Acidic Oxygens  Geroprotectors           DataSet  \\\n","0                  0               0               1    Geroprotectors   \n","1                  0               0               1    Geroprotectors   \n","2                  0               1               1    Geroprotectors   \n","3                  2               0               1    Geroprotectors   \n","4                  0               0               1    Geroprotectors   \n","..               ...             ...             ...               ...   \n","400                0               0               0  NoGeroprotectors   \n","401                0               0               0  NoGeroprotectors   \n","402                0               0               0  NoGeroprotectors   \n","403                0               0               0  NoGeroprotectors   \n","404                0               1               0  NoGeroprotectors   \n","\n","                                                 Smile  \n","0    CC[C@@H]1CC2=C(C=CC(=C2)O)C3=C1C4=C(C[C@H]3CC)...  \n","1    Oc1cc(cc(O)c1O)C(=O)OC[C@H]1O[C@@H](OC(=O)c2cc...  \n","2                                C(CCC/C=C/C(=O)O)CCCO  \n","3                              CC(=NCC1=CC=CC(=C1)CN)N  \n","4    [H][C@]12CC[C@]3(C)[C@H](O)CC[C@@]3([H])[C@]1(...  \n","..                                                 ...  \n","400  CC1=CC=C(C=C1)C(=O)C2=CC(=C(C(=C2)O)O)[N+](=O)...  \n","401          CN(C)C1=CC2=C(C=C1)C=C3C=CC(=CC3=N2)N(C)C  \n","402     COC1=C2C3=C(C(=O)CC3)C(=O)OC2=C4C5C=COC5OC4=C1  \n","403            CCC(=C(CC)C1=CC=C(C=C1)O)C2=CC=C(C=C2)O  \n","404                   C1=CC=C2C(=C1)C(=O)C=C(N2)C(=O)O  \n","\n","[405 rows x 47 columns]"],"text/html":["\n","  <div id=\"df-2e314c40-239f-41d0-acc6-a7dbe3317a25\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Total Molweight</th>\n","      <th>Monoisotopic Mass</th>\n","      <th>cLogP</th>\n","      <th>cLogS</th>\n","      <th>H-Acceptors</th>\n","      <th>H-Donors</th>\n","      <th>Total Surface Area</th>\n","      <th>Relative PSA</th>\n","      <th>Polar Surface Area</th>\n","      <th>...</th>\n","      <th>Amides</th>\n","      <th>Amines</th>\n","      <th>Alkyl-Amines</th>\n","      <th>Aromatic Amines</th>\n","      <th>Aromatic Nitrogens</th>\n","      <th>Basic Nitrogens</th>\n","      <th>Acidic Oxygens</th>\n","      <th>Geroprotectors</th>\n","      <th>DataSet</th>\n","      <th>Smile</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(R,R)-Cis-Diethyl Tetrahydro-2,8-Chrysenediol</td>\n","      <td>320.431</td>\n","      <td>320.177630</td>\n","      <td>4.8318</td>\n","      <td>-4.116</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>246.20</td>\n","      <td>0.106420</td>\n","      <td>40.46</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Geroprotectors</td>\n","      <td>CC[C@@H]1CC2=C(C=CC(=C2)O)C3=C1C4=C(C[C@H]3CC)...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1,2,3,4,6-Penta-O-Galloyl-B-D-Glucose</td>\n","      <td>940.679</td>\n","      <td>940.118190</td>\n","      <td>1.8357</td>\n","      <td>-3.209</td>\n","      <td>26</td>\n","      <td>15</td>\n","      <td>619.06</td>\n","      <td>0.519660</td>\n","      <td>444.18</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Geroprotectors</td>\n","      <td>Oc1cc(cc(O)c1O)C(=O)OC[C@H]1O[C@@H](OC(=O)c2cc...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10-Hydroxy-2-Decenoic Acid</td>\n","      <td>186.250</td>\n","      <td>186.125595</td>\n","      <td>2.1572</td>\n","      <td>-1.884</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>166.77</td>\n","      <td>0.235290</td>\n","      <td>57.53</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Geroprotectors</td>\n","      <td>C(CCC/C=C/C(=O)O)CCCO</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1400W</td>\n","      <td>177.250</td>\n","      <td>177.126597</td>\n","      <td>-0.1475</td>\n","      <td>-1.874</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>153.05</td>\n","      <td>0.274750</td>\n","      <td>64.40</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Geroprotectors</td>\n","      <td>CC(=NCC1=CC=CC(=C1)CN)N</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17-A-Estradiol</td>\n","      <td>272.387</td>\n","      <td>272.177630</td>\n","      <td>3.8766</td>\n","      <td>-4.020</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200.69</td>\n","      <td>0.130550</td>\n","      <td>40.46</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Geroprotectors</td>\n","      <td>[H][C@]12CC[C@]3(C)[C@H](O)CC[C@@]3([H])[C@]1(...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>400</th>\n","      <td>Tolcapone</td>\n","      <td>273.243</td>\n","      <td>273.063724</td>\n","      <td>1.5205</td>\n","      <td>-3.928</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>199.40</td>\n","      <td>0.349350</td>\n","      <td>103.35</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NoGeroprotectors</td>\n","      <td>CC1=CC=C(C=C1)C(=O)C2=CC(=C(C(=C2)O)O)[N+](=O)...</td>\n","    </tr>\n","    <tr>\n","      <th>401</th>\n","      <td>Acridine Orange</td>\n","      <td>265.359</td>\n","      <td>265.157897</td>\n","      <td>3.0853</td>\n","      <td>-3.895</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>210.86</td>\n","      <td>0.085697</td>\n","      <td>19.37</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NoGeroprotectors</td>\n","      <td>CN(C)C1=CC2=C(C=C1)C=C3C=CC(=CC3=N2)N(C)C</td>\n","    </tr>\n","    <tr>\n","      <th>402</th>\n","      <td>Aflatoxins</td>\n","      <td>312.276</td>\n","      <td>312.063390</td>\n","      <td>1.6346</td>\n","      <td>-3.266</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>208.96</td>\n","      <td>0.316230</td>\n","      <td>71.06</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NoGeroprotectors</td>\n","      <td>COC1=C2C3=C(C(=O)CC3)C(=O)OC2=C4C5C=COC5OC4=C1</td>\n","    </tr>\n","    <tr>\n","      <th>403</th>\n","      <td>Diethylstilbestrol</td>\n","      <td>268.355</td>\n","      <td>268.146330</td>\n","      <td>4.5248</td>\n","      <td>-3.158</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>220.68</td>\n","      <td>0.118720</td>\n","      <td>40.46</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NoGeroprotectors</td>\n","      <td>CCC(=C(CC)C1=CC=C(C=C1)O)C2=CC=C(C=C2)O</td>\n","    </tr>\n","    <tr>\n","      <th>404</th>\n","      <td>Kynurenic Acid</td>\n","      <td>189.170</td>\n","      <td>189.042594</td>\n","      <td>0.2516</td>\n","      <td>-2.431</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>137.78</td>\n","      <td>0.367540</td>\n","      <td>66.40</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NoGeroprotectors</td>\n","      <td>C1=CC=C2C(=C1)C(=O)C=C(N2)C(=O)O</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>405 rows × 47 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e314c40-239f-41d0-acc6-a7dbe3317a25')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2e314c40-239f-41d0-acc6-a7dbe3317a25 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2e314c40-239f-41d0-acc6-a7dbe3317a25');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9cf95257-1329-4c62-88c9-12f642b1c0bc\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9cf95257-1329-4c62-88c9-12f642b1c0bc')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9cf95257-1329-4c62-88c9-12f642b1c0bc button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_86103805-3cfa-4d69-84fa-bba803f47624\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('datos')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_86103805-3cfa-4d69-84fa-bba803f47624 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('datos');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"datos"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Seleccionar las columnas de interés y dividir los datos en caracteristicas\n","columnas_interes = [1, 3, 5, 6, 7, 8, 20]\n","X = datos.iloc[:, columnas_interes]\n","y = datos.iloc[:, 44]"],"metadata":{"id":"BunH9AZEoIfM","executionInfo":{"status":"ok","timestamp":1751934878894,"user_tz":360,"elapsed":4,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Dividir los datos en conjuntos de entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"0JJwdjUppszP","executionInfo":{"status":"ok","timestamp":1751934880778,"user_tz":360,"elapsed":9,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# 1. Especifica las columnas de interés\n","nombre_col      = 'Geroprotectors'       # nombre del compuesto\n","nombre_extra    = 'Name'                # nueva columna solicitada\n","etiqueta_col    = datos.columns[44]     # la etiqueta que ya usas como y\n","\n","cols = [nombre_col, nombre_extra, etiqueta_col]  # orden en la salida\n","\n","# 2. Construye las listas train y test con las columnas seleccionadas\n","train_list = datos.loc[X_train.index, cols].copy()\n","train_list['Conjunto'] = 'train'        # marca de procedencia\n","\n","test_list  = datos.loc[X_test.index,  cols].copy()\n","test_list['Conjunto'] = 'test'\n","\n","# 3. Une ambas tablas (opcional)\n","lista_completa = pd.concat([train_list, test_list])\n","\n","# 4. Visualiza o guarda\n","print(lista_completa.head())\n","lista_completa.to_csv('lista_train_test_geroprotectores.csv', index=False)\n","\n","lista_completa"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":528},"id":"JFiedjsfpsxA","executionInfo":{"status":"ok","timestamp":1751934881867,"user_tz":360,"elapsed":33,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"135cba83-2fb6-409c-c2fc-04ae51fdbc5f"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["     Geroprotectors              Name  Geroprotectors Conjunto\n","355               0        Dronabinol               0    train\n","234               0  MEPAZINE ACETATE               0    train\n","3                 1             1400W               1    train\n","18                1            Amn082               1    train\n","131               1         Mianserin               1    train\n"]},{"output_type":"execute_result","data":{"text/plain":["     Geroprotectors                Name  Geroprotectors Conjunto\n","355               0          Dronabinol               0    train\n","234               0    MEPAZINE ACETATE               0    train\n","3                 1               1400W               1    train\n","18                1              Amn082               1    train\n","131               1           Mianserin               1    train\n","..              ...                 ...             ...      ...\n","45                1     Chloramphenicol               1     test\n","90                1    Ferulsinaic Acid               1     test\n","249               0        TROGLITAZONE               0     test\n","403               0  Diethylstilbestrol               0     test\n","374               0         afuresertib               0     test\n","\n","[405 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-4425e96d-d548-4ec3-87d6-f9ab4ec4ee40\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Geroprotectors</th>\n","      <th>Name</th>\n","      <th>Geroprotectors</th>\n","      <th>Conjunto</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>355</th>\n","      <td>0</td>\n","      <td>Dronabinol</td>\n","      <td>0</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>234</th>\n","      <td>0</td>\n","      <td>MEPAZINE ACETATE</td>\n","      <td>0</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1400W</td>\n","      <td>1</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>Amn082</td>\n","      <td>1</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>131</th>\n","      <td>1</td>\n","      <td>Mianserin</td>\n","      <td>1</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>1</td>\n","      <td>Chloramphenicol</td>\n","      <td>1</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>1</td>\n","      <td>Ferulsinaic Acid</td>\n","      <td>1</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>0</td>\n","      <td>TROGLITAZONE</td>\n","      <td>0</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>403</th>\n","      <td>0</td>\n","      <td>Diethylstilbestrol</td>\n","      <td>0</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>374</th>\n","      <td>0</td>\n","      <td>afuresertib</td>\n","      <td>0</td>\n","      <td>test</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>405 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4425e96d-d548-4ec3-87d6-f9ab4ec4ee40')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4425e96d-d548-4ec3-87d6-f9ab4ec4ee40 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4425e96d-d548-4ec3-87d6-f9ab4ec4ee40');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-41c0fe77-cab0-4f6f-b758-935960c51d39\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41c0fe77-cab0-4f6f-b758-935960c51d39')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-41c0fe77-cab0-4f6f-b758-935960c51d39 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_7a0b2a37-8226-4701-8707-0515fb49dc94\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lista_completa')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7a0b2a37-8226-4701-8707-0515fb49dc94 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('lista_completa');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"lista_completa","summary":"{\n  \"name\": \"lista_completa\",\n  \"rows\": 405,\n  \"fields\": [\n    {\n      \"column\": \"Geroprotectors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 404,\n        \"samples\": [\n          \"2-(2-Hydroxyphenyl)-Benzoxazole\",\n          \"Beta-Estradiol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geroprotectors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"test\",\n          \"train\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# 3. Guarda el resultado\n","#lista_completa.to_csv('data_test-train_KNN.csv', index=False)\n","#print(\"Archivo CSV generado: data_test-train.csv\")"],"metadata":{"id":"GpJEwKArpsuK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Escalar los datos\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"RSmXqWdcpsre","executionInfo":{"status":"ok","timestamp":1751934884522,"user_tz":360,"elapsed":10,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Calcular la precisión para diferentes valores de K\n","k_range = range(1, 31)\n","scores = []\n","for k in k_range:\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    knn.fit(X_train_scaled, y_train)\n","    scores.append(knn.score(X_test_scaled, y_test))\n"],"metadata":{"id":"5FGxAUWkpsop","executionInfo":{"status":"ok","timestamp":1751934886254,"user_tz":360,"elapsed":273,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Graficar la precisión vs K\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_range, scores)\n","plt.xlabel('Value of K')\n","plt.ylabel('Accuracy')\n","plt.title('Accuracy of the KNN model for different values of K')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"7DNytB_LpsmH","executionInfo":{"status":"ok","timestamp":1751934887937,"user_tz":360,"elapsed":293,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"9a964309-26e3-4e61-e03d-666fa9ce5aa8"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Encontrar el K óptimo\n","k_optimo = k_range[scores.index(max(scores))]\n","print(f\"El valor óptimo de K es: {k_optimo}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EEZ9qq2Kr_YB","executionInfo":{"status":"ok","timestamp":1751934890531,"user_tz":360,"elapsed":6,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"108feceb-512e-47b8-9666-938544a8c69d"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["El valor óptimo de K es: 27\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"x1g-i77Br_Oa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Versión más completa con matriz de confusión para cada fold\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import cohen_kappa_score, matthews_corrcoef\n","\n","from sklearn.model_selection import cross_val_score, StratifiedKFold\n","\n","# Configurar la validación cruzada (5 folds estratificados)\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Realizar validación cruzada\n","cv_scores = cross_val_score(\n","    KNeighborsClassifier(n_neighbors=k_optimo),\n","    X=scaler.fit_transform(X),  # Usamos todos los datos escalados\n","    y=y,\n","    cv=cv,\n","    scoring='accuracy'\n",")\n","\n","\n","# Obtener predicciones para cada fold\n","y_pred_cv = cross_val_predict(\n","    KNeighborsClassifier(n_neighbors=k_optimo),\n","    X=scaler.fit_transform(X),\n","    y=y,\n","    cv=cv\n",")\n","\n","# Matriz de confusión global\n","cm_cv = confusion_matrix(y, y_pred_cv)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm_cv, annot=True, fmt='d', cmap='Blues')\n","plt.title('Matriz de Confusión (Validación Cruzada)')\n","plt.xlabel('Predicción')\n","plt.ylabel('Real')\n","plt.show()\n","\n","# Calcular métricas\n","tn, fp, fn, tp = cm_cv.ravel()\n","accuracy_cv = (tp + tn) / (tp + tn + fp + fn)\n","sensibilidad_cv = tp / (tp + fn)\n","especificidad_cv = tn / (tn + fp)\n","precision_cv = tp / (tp + fp)\n","kappa_cv = cohen_kappa_score(y, y_pred_cv)\n","mcc_cv = matthews_corrcoef(y, y_pred_cv)\n","\n","print(f\"\\nMétricas de Validación Cruzada (5 folds):\")\n","print(f\"Accuracy: {accuracy_cv:.4f}\")\n","print(f\"Sensibilidad (Recall): {sensibilidad_cv:.4f}\")\n","print(f\"Especificidad: {especificidad_cv:.4f}\")\n","print(f\"Precisión: {precision_cv:.4f}\")\n","print(f\"Kappa de Cohen: {kappa_cv:.4f}\")\n","print(f\"MCC (Matthews Correlation Coefficient): {mcc_cv:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":703},"id":"czD9doYzr_JZ","executionInfo":{"status":"ok","timestamp":1751838716489,"user_tz":360,"elapsed":271,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"993d50d6-84db-4adf-ed86-9ceb041da06f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Métricas de Validación Cruzada (5 folds):\n","Accuracy: 0.5679\n","Sensibilidad (Recall): 0.4951\n","Especificidad: 0.6432\n","Precisión: 0.5896\n","Kappa de Cohen: 0.1380\n","MCC (Matthews Correlation Coefficient): 0.1398\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"mIYJGqiZumNF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1aGjEgC3upmO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import cross_val_predict, StratifiedKFold\n","from sklearn.metrics import confusion_matrix, cohen_kappa_score, matthews_corrcoef\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.preprocessing import StandardScaler\n","from scipy import stats\n","\n","# Configuración inicial\n","scaler = StandardScaler()\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Obtener predicciones para cada fold\n","y_pred_cv = cross_val_predict(\n","    KNeighborsClassifier(n_neighbors=k_optimo),\n","    X=scaler.fit_transform(X),\n","    y=y,\n","    cv=cv\n",")\n","\n","# Calcular métricas globales\n","tn, fp, fn, tp = cm_cv.ravel()\n","accuracy_cv = (tp + tn) / (tp + tn + fp + fn)\n","sensibilidad_cv = tp / (tp + fn)\n","especificidad_cv = tn / (tn + fp)\n","precision_cv = tp / (tp + fp)\n","kappa_cv = cohen_kappa_score(y, y_pred_cv)\n","mcc_cv = matthews_corrcoef(y, y_pred_cv)\n","\n","# Calcular métricas por fold para obtener variabilidad\n","def calculate_metrics(y_true, y_pred):\n","    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()\n","    metrics = {\n","        'Accuracy': (tp + tn) / (tp + tn + fp + fn),\n","        'Precision': tp / (tp + fp),\n","        'Recall': tp / (tp + fn),\n","        'Specificity': tn / (tn + fp),\n","        'Kappa': cohen_kappa_score(y_true, y_pred),\n","        'Mcc': matthews_corrcoef(y_true, y_pred)\n","    }\n","    return metrics\n","\n","# Calcular métricas para cada fold\n","fold_metrics = []\n","for train_idx, test_idx in cv.split(scaler.fit_transform(X), y):\n","    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n","    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n","\n","    model = KNeighborsClassifier(n_neighbors=k_optimo)\n","    model.fit(scaler.fit_transform(X_train), y_train)\n","    y_pred = model.predict(scaler.transform(X_test))\n","\n","    fold_metrics.append(calculate_metrics(y_test, y_pred))\n","\n","# Calcular promedios y desviaciones estándar\n","results = {}\n","for metric in fold_metrics[0].keys():\n","    values = [fold[metric] for fold in fold_metrics]\n","    results[metric] = {\n","        'mean': np.mean(values),\n","        'std': np.std(values)\n","    }\n","\n","# Mostrar resultados en el formato solicitado\n","print(\"\\n=== RESULTADOS DE VALIDACIÓN CRUZADA (5-fold) ===\")\n","print(f\"Accuracy: {results['Accuracy']['mean']:.4f} (±{results['Accuracy']['std']:.4f})\")\n","print(f\"Precision: {results['Precision']['mean']:.4f} (±{results['Precision']['std']:.4f})\")\n","print(f\"Recall: {results['Recall']['mean']:.4f} (±{results['Recall']['std']:.4f})\")\n","print(f\"F1: {2 * (results['Precision']['mean'] * results['Recall']['mean']) / (results['Precision']['mean'] + results['Recall']['mean']):.4f} (±{np.std([2 * (fold['Precision'] * fold['Recall']) / (fold['Precision'] + fold['Recall']) for fold in fold_metrics]):.4f})\")\n","print(f\"Specificity: {results['Specificity']['mean']:.4f} (±{results['Specificity']['std']:.4f})\")\n","print(f\"Kappa: {results['Kappa']['mean']:.4f} (±{results['Kappa']['std']:.4f})\")\n","print(f\"Mcc: {results['Mcc']['mean']:.4f} (±{results['Mcc']['std']:.4f})\")\n"],"metadata":{"id":"haQFC_9JupjO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751935015617,"user_tz":360,"elapsed":294,"user":{"displayName":"Jose Alberto Santiago De la Cruz","userId":"08503411874153474204"}},"outputId":"ff4ba0fa-edc0-4b00-f414-81e0dc961861"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== RESULTADOS DE VALIDACIÓN CRUZADA (5-fold) ===\n","Accuracy: 0.5654 (±0.0212)\n","Precision: 0.5888 (±0.0332)\n","Recall: 0.5005 (±0.0726)\n","F1: 0.5410 (±0.0390)\n","Specificity: 0.6337 (±0.0813)\n","Kappa: 0.1337 (±0.0429)\n","Mcc: 0.1370 (±0.0440)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"eB9oqXxMdWlF"},"execution_count":null,"outputs":[]}]}